# Generated by Django 5.2.7 on 2025-10-20 17:34

from django.conf import settings
from django.db import migrations, models


def drop_fecha_produccion_column(apps, schema_editor):
    """Elimina la columna y el índice obsoletos si siguen presentes."""

    model = apps.get_model("produccion", "RegistroProduccion")
    table_name = model._meta.db_table
    connection = schema_editor.connection

    with connection.cursor() as cursor:
        existing_columns = {
            column.name for column in connection.introspection.get_table_description(cursor, table_name)
        }

    if "fecha_produccion" in existing_columns:
        field = models.DateField()
        field.set_attributes_from_name("fecha_produccion")
        schema_editor.remove_field(model, field)

    index_name = "produccion_fecha__82798b_idx"
    quoted_index = connection.ops.quote_name(index_name)
    drop_index_sql = f"DROP INDEX IF EXISTS {quoted_index}"
    try:
        schema_editor.execute(drop_index_sql)
    except Exception:  # pragma: no cover - el índice puede no existir o el motor no soportar IF EXISTS
        schema_editor.execute(f"DROP INDEX {quoted_index}")


def ensure_registroproduccion_table(apps, schema_editor):
    """Garantiza que la tabla exista antes de manipular sus constraints."""

    model = apps.get_model("produccion", "RegistroProduccion")
    table_name = model._meta.db_table
    existing_tables = schema_editor.connection.introspection.table_names()
    if table_name not in existing_tables:
        schema_editor.create_model(model)


class Migration(migrations.Migration):

    dependencies = [
        ("catalogos", "0007_maquinaattachment"),
        ("produccion", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(
            ensure_registroproduccion_table,
            migrations.RunPython.noop,
        ),
        migrations.RunPython(
            drop_fecha_produccion_column,
            migrations.RunPython.noop,
        ),
        migrations.RemoveConstraint(
            model_name="registroproduccion",
            name="produccion_registro_cantidad_mayor_cero",
        ),
        migrations.AddConstraint(
            model_name="registroproduccion",
            constraint=models.CheckConstraint(
                check=models.Q(cantidad_producida__gt=0),
                name="produccion_registro_cantidad_mayor_cero",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="registroproduccion",
            name="produccion_registro_hora_fin_mayor_inicio",
        ),
        migrations.AddConstraint(
            model_name="registroproduccion",
            constraint=models.CheckConstraint(
                check=models.Q(hora_fin__gt=models.F("hora_inicio")),
                name="produccion_registro_hora_fin_mayor_inicio",
            ),
        ),
    ]

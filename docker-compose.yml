version: '3.8'

services:
  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: siprosapp-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE=http://localhost:8000/api
      - API_BASE_INTERNAL=http://api:8000/api
    networks:
      - siprosapp-network
    restart: unless-stopped

  # Backend Django
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: siprosapp-api
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - ./backend/logs:/app/backend/logs
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DB_NAME=siprosa_mes
      - DB_USER=siprosa_user
      - DB_PASSWORD=siprosa_pass_123
      - DB_HOST=postgres
      - DB_PORT=5432
      - SECRET_KEY=django-insecure-dev-key-change-in-production-123456789
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,api
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
      - CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://localhost:8000
      - THROTTLE_RATE_ANON=100/hour
      - THROTTLE_RATE_USER=1000/hour
      - LOGIN_THROTTLE_RATE=10/min
      - REGISTER_THROTTLE_RATE=5/hour
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@siprosa.com.ar
      - DJANGO_SUPERUSER_PASSWORD=Admin123456
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - siprosapp-network
    restart: unless-stopped

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: siprosapp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: siprosa_mes
      POSTGRES_USER: siprosa_user
      POSTGRES_PASSWORD: siprosa_pass_123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siprosa_user -d siprosa_mes"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - siprosapp-network

volumes:
  postgres-data:       # ‚Üê Datos de PostgreSQL

networks:
  siprosapp-network:
    driver: bridge

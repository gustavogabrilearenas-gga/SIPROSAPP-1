version: '3.8'

services:
  # Backend Django
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: siprosapp-api
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=True
      - DB_NAME=siprosa_mes
      - DB_USER=siprosa_user
      - DB_PASSWORD=siprosa_pass_123
      - DB_HOST=postgres
      - DB_PORT=5432
      - SECRET_KEY=django-insecure-dev-key-change-in-production-123456789
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,api
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8000
      - CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - siprosapp-network
    restart: unless-stopped

  # Frontend Next.js
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: siprosapp-web
    volumes:
      - ./frontend:/app
      - web-node-modules:/app/node_modules  # ← NOMBRADO (persiste)
      - web-next-cache:/app/.next         # ← NOMBRADO (persiste)
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      # El navegador usa esta URL pública (visible en el bundle) para llamar al backend
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      # Next.js del lado del servidor resuelve el backend vía la red interna de Docker
      - NEXT_PUBLIC_API_URL_SERVER=http://api:8000
      # Optimizaciones
      - NEXT_PUBLIC_ENABLE_CACHE=true
      - WATCHPACK_POLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_OPTIONS="--max-old-space-size=4096"
    depends_on:
      - api
    networks:
      - siprosapp-network
    restart: unless-stopped

  # Redis para caching
  redis:
    image: redis:alpine
    container_name: siprosapp-redis
    ports:
      - "6379:6379"
    networks:
      - siprosapp-network
    restart: unless-stopped

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: siprosapp-postgres
    restart: unless-stopped
    command: postgres -c shared_buffers=128MB -c work_mem=8MB
    environment:
      POSTGRES_DB: siprosa_mes
      POSTGRES_USER: siprosa_user
      POSTGRES_PASSWORD: siprosa_pass_123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siprosa_user -d siprosa_mes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - siprosapp-network

volumes:
  postgres-data:       # ← Datos de PostgreSQL
  web-node-modules:    # ← Persiste las dependencias npm
  web-next-cache:      # ← Persiste el caché de Next.js

networks:
  siprosapp-network:
    driver: bridge

'use client'

import { useState, useEffect } from 'react'
// import { motion, AnimatePresence } from 'framer-motion'
import { X, Package, Calendar, User, Clock, Target, AlertCircle, CheckCircle, FileText, Ban, History, Eye, EyeOff, Layers } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { api } from '@/lib/api'
import { useAuth } from '@/stores/auth-store'
import { LoteEtapasList } from '@/components/lote-etapas-list'
import type { Lote } from '@/types/models'
import { format } from 'date-fns'
import { es } from 'date-fns/locale'

// Función auxiliar para formatear fechas de manera segura
const formatFecha = (fecha: string | null | undefined, formato: string = 'dd/MM/yyyy HH:mm') => {
  if (!fecha) return '-'
  try {
    const date = new Date(fecha)
    // Verificar si la fecha es válida
    if (isNaN(date.getTime())) {
      return '-'
    }
    return format(date, formato, { locale: es })
  } catch {
    return '-'
  }
}

interface LogAuditoria {
  id: number
  usuario: string
  usuario_nombre_completo: string
  accion: string
  cambios: any
  fecha: string
  ip_address: string
}

interface LoteDetailModalProps {
  loteId: number | null
  isOpen: boolean
  onClose: () => void
  onEdit?: (lote: Lote) => void
  onUpdate?: () => void
}

export function LoteDetailModal({ loteId, isOpen, onClose, onEdit, onUpdate }: LoteDetailModalProps) {
  const { user } = useAuth()
  const [lote, setLote] = useState<Lote | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [showLogs, setShowLogs] = useState(false)
  const [logs, setLogs] = useState<LogAuditoria[]>([])
  const [isLoadingLogs, setIsLoadingLogs] = useState(false)
  const [isCancelling, setIsCancelling] = useState(false)
  const [cancelMotivo, setCancelMotivo] = useState('')
  const [showCancelDialog, setShowCancelDialog] = useState(false)
  const [showHideDialog, setShowHideDialog] = useState(false)
  const [hideMotivo, setHideMotivo] = useState('')
  const [isHiding, setIsHiding] = useState(false)
  const [activeTab, setActiveTab] = useState<'general' | 'etapas' | 'auditoria'>('general')

  useEffect(() => {
    if (isOpen && loteId) {
      fetchLoteDetail()
    }
  }, [isOpen, loteId])

  const fetchLoteDetail = async () => {
    if (!loteId) return
    
    setIsLoading(true)
    setError(null)
    try {
      const loteData = await api.getLote(loteId)
      setLote(loteData)
    } catch (err: any) {
      console.error('Error al cargar detalle del lote:', err)
      setError('Error al cargar los detalles del lote')
    } finally {
      setIsLoading(false)
    }
  }

  const fetchLogs = async () => {
    if (!loteId) return
    
    // Si ya están mostrados, solo ocultarlos
    if (showLogs) {
      setShowLogs(false)
      return
    }
    
    // Si no están cargados o queremos refrescar, cargarlos
    setIsLoadingLogs(true)
    try {
      const response = await api.get(`/api/lotes/${loteId}/logs_auditoria/`)
      console.log('Logs cargados:', response.data)
      setLogs(response.data)
      setShowLogs(true)
    } catch (err: any) {
      console.error('Error al cargar logs de auditoría:', err)
      alert('Error al cargar el historial: ' + (err.response?.data?.error || err.message))
    } finally {
      setIsLoadingLogs(false)
    }
  }

  const handleCancelar = async () => {
    if (!loteId || !cancelMotivo.trim()) {
      alert('Debe proporcionar un motivo de cancelación')
      return
    }
    
    setIsCancelling(true)
    try {
      await api.post(`/api/lotes/${loteId}/cancelar/`, {
        motivo: cancelMotivo
      })
      
      // Recargar datos
      await fetchLoteDetail()
      setShowCancelDialog(false)
      setCancelMotivo('')
      
      // Notificar actualización
      if (onUpdate) onUpdate()
      
      alert('Lote cancelado exitosamente')
    } catch (err: any) {
      console.error('Error al cancelar lote:', err)
      alert(err.response?.data?.error || 'Error al cancelar el lote')
    } finally {
      setIsCancelling(false)
    }
  }

  const handleOcultar = async () => {
    if (!loteId || !hideMotivo.trim()) {
      alert('Debe proporcionar un motivo para ocultar el lote')
      return
    }
    
    setIsHiding(true)
    try {
      await api.post(`/api/lotes/${loteId}/ocultar/`, {
        motivo: hideMotivo
      })
      
      // Recargar datos
      await fetchLoteDetail()
      setShowHideDialog(false)
      setHideMotivo('')
      
      // Notificar actualización
      if (onUpdate) onUpdate()
      
      alert('Lote ocultado exitosamente')
    } catch (err: any) {
      console.error('Error al ocultar lote:', err)
      alert(err.response?.data?.error || 'Error al ocultar el lote')
    } finally {
      setIsHiding(false)
    }
  }

  const handleMostrar = async () => {
    if (!loteId) return
    
    setIsHiding(true)
    try {
      await api.post(`/api/lotes/${loteId}/mostrar/`)
      
      // Recargar datos
      await fetchLoteDetail()
      
      // Notificar actualización
      if (onUpdate) onUpdate()
      
      alert('Lote hecho visible exitosamente')
    } catch (err: any) {
      console.error('Error al mostrar lote:', err)
      alert(err.response?.data?.error || 'Error al hacer visible el lote')
    } finally {
      setIsHiding(false)
    }
  }

  const getEstadoBadge = (estado: string) => {
    const estados: Record<string, { bg: string, text: string, label: string, icon: any }> = {
      'PLANIFICADO': { bg: 'bg-blue-100', text: 'text-blue-800', label: 'Planificado', icon: Clock },
      'EN_PROCESO': { bg: 'bg-yellow-100', text: 'text-yellow-800', label: 'En Proceso', icon: Clock },
      'PAUSADO': { bg: 'bg-orange-100', text: 'text-orange-800', label: 'Pausado', icon: AlertCircle },
      'FINALIZADO': { bg: 'bg-green-100', text: 'text-green-800', label: 'Finalizado', icon: CheckCircle },
      'CANCELADO': { bg: 'bg-gray-100', text: 'text-gray-800', label: 'Cancelado', icon: AlertCircle },
      'RECHAZADO': { bg: 'bg-red-100', text: 'text-red-800', label: 'Rechazado', icon: AlertCircle },
      'LIBERADO': { bg: 'bg-purple-100', text: 'text-purple-800', label: 'Liberado', icon: CheckCircle },
    }
    const config = estados[estado] || { bg: 'bg-gray-100', text: 'text-gray-800', label: estado, icon: Clock }
    const Icon = config.icon
    return (
      <Badge className={`${config.bg} ${config.text} border-0 flex items-center space-x-1`}>
        <Icon className="h-3 w-3" />
        <span>{config.label}</span>
      </Badge>
    )
  }

  const getPrioridadBadge = (prioridad: string) => {
    const prioridades: Record<string, { bg: string, text: string, label: string }> = {
      'URGENTE': { bg: 'bg-red-100', text: 'text-red-800', label: '🔥 Urgente' },
      'ALTA': { bg: 'bg-orange-100', text: 'text-orange-800', label: '⬆️ Alta' },
      'NORMAL': { bg: 'bg-blue-100', text: 'text-blue-800', label: '➡️ Normal' },
      'BAJA': { bg: 'bg-gray-100', text: 'text-gray-800', label: '⬇️ Baja' },
    }
    const config = prioridades[prioridad] || { bg: 'bg-gray-100', text: 'text-gray-800', label: prioridad }
    return (
      <Badge className={`${config.bg} ${config.text} border-0`}>
        {config.label}
      </Badge>
    )
  }

  const formatFecha = (fecha: string | null | undefined) => {
    if (!fecha) return 'No definida'
    try {
      return format(new Date(fecha), 'dd/MM/yyyy HH:mm', { locale: es })
    } catch {
      return fecha
    }
  }

  const formatFechaCorta = (fecha: string | null | undefined) => {
    if (!fecha) return 'No definida'
    try {
      return format(new Date(fecha), 'dd/MM/yyyy', { locale: es })
    } catch {
      return fecha
    }
  }

  if (!isOpen) return null

  return (
    <div
      className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
      onClick={onClose}
    >
          <div
            className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] flex flex-col overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="flex-shrink-0 bg-gradient-to-r from-blue-600 to-indigo-600 p-4 sm:p-6 text-white">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2 sm:space-x-3 flex-1 min-w-0">
                  <div className="bg-white/20 p-1.5 sm:p-2 rounded-lg flex-shrink-0">
                    <Package className="h-5 w-5 sm:h-6 sm:w-6" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <h2 className="text-lg sm:text-2xl font-bold truncate">
                      {lote?.codigo_lote || 'Cargando...'}
                    </h2>
                    <p className="text-blue-100 text-sm sm:text-base truncate">
                      {lote?.producto_nombre || 'Detalle del lote'}
                    </p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClose}
                  className="text-white hover:bg-white/20 flex-shrink-0 ml-2"
                >
                  <X className="h-5 w-5" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-4 sm:p-6">
              {isLoading ? (
                <div className="text-center py-12">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                  <p className="text-gray-600">Cargando detalles del lote...</p>
                </div>
              ) : error ? (
                <div className="text-center py-12">
                  <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
                  <p className="text-red-600 mb-4">{error}</p>
                  <Button onClick={fetchLoteDetail}>
                    Reintentar
                  </Button>
                </div>
              ) : lote ? (
                <div className="space-y-6">
                  {/* Estado y Prioridad */}
                  <div className="flex items-center space-x-4 mb-6">
                    {getEstadoBadge(lote.estado)}
                    {getPrioridadBadge(lote.prioridad)}
                  </div>

                  {/* Pestañas */}
                  <div className="border-b border-gray-200">
                    <nav className="-mb-px flex space-x-8">
                      {[
                        { id: 'general', label: 'Información General', icon: Package },
                        { id: 'etapas', label: 'Etapas de Producción', icon: Layers },
                        { id: 'auditoria', label: 'Auditoría', icon: History }
                      ].map((tab) => (
                        <button
                          key={tab.id}
                          onClick={() => setActiveTab(tab.id as any)}
                          className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                            activeTab === tab.id
                              ? 'border-blue-500 text-blue-600'
                              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                          }`}
                        >
                          <tab.icon className="h-4 w-4" />
                          <span>{tab.label}</span>
                        </button>
                      ))}
                    </nav>
                  </div>

                  {/* Contenido de las pestañas */}
                  {activeTab === 'general' && (
                    <div className="space-y-6">

                  {/* Información Principal */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Información del Producto */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center space-x-2">
                          <Package className="h-5 w-5 text-blue-600" />
                          <span>Información del Producto</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        <div>
                          <label className="text-sm font-medium text-gray-500">Producto</label>
                          <p className="text-lg font-semibold">{lote.producto_nombre}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Código de Lote</label>
                          <p className="font-mono text-lg">{lote.codigo_lote}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Unidad</label>
                          <p className="text-lg">{lote.unidad}</p>
                        </div>
                      </CardContent>
                    </Card>

                    {/* Cantidades */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center space-x-2">
                          <Target className="h-5 w-5 text-green-600" />
                          <span>Cantidades</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        <div>
                          <label className="text-sm font-medium text-gray-500">Planificada</label>
                          <p className="text-2xl font-bold text-blue-600">
                            {lote.cantidad_planificada?.toLocaleString()}
                          </p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Producida</label>
                          <p className="text-2xl font-bold text-green-600">
                            {lote.cantidad_producida?.toLocaleString()}
                          </p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Rechazada</label>
                          <p className="text-2xl font-bold text-red-600">
                            {lote.cantidad_rechazada?.toLocaleString()}
                          </p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Rendimiento</label>
                          <div className="flex items-center space-x-2">
                            <div className="flex-1 bg-gray-200 rounded-full h-3">
                              <div
                                className={`h-3 rounded-full ${
                                  lote.rendimiento_porcentaje >= 90
                                    ? 'bg-green-500'
                                    : lote.rendimiento_porcentaje >= 70
                                    ? 'bg-yellow-500'
                                    : 'bg-red-500'
                                }`}
                                style={{
                                  width: `${Math.min(lote.rendimiento_porcentaje || 0, 100)}%`,
                                }}
                              />
                            </div>
                            <span className="text-lg font-semibold text-gray-700">
                              {lote.rendimiento_porcentaje?.toFixed(1) || 0}%
                            </span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Fechas */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center space-x-2">
                        <Calendar className="h-5 w-5 text-purple-600" />
                        <span>Cronograma</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-3">
                          <h4 className="font-semibold text-gray-700">Planificado</h4>
                          <div>
                            <label className="text-sm font-medium text-gray-500">Inicio</label>
                            <p className="text-lg">{formatFecha(lote.fecha_planificada_inicio)}</p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-gray-500">Fin</label>
                            <p className="text-lg">{formatFecha(lote.fecha_planificada_fin)}</p>
                          </div>
                        </div>
                        <div className="space-y-3">
                          <h4 className="font-semibold text-gray-700">Real</h4>
                          <div>
                            <label className="text-sm font-medium text-gray-500">Inicio</label>
                            <p className="text-lg">{formatFecha(lote.fecha_real_inicio)}</p>
                          </div>
                          <div>
                            <label className="text-sm font-medium text-gray-500">Fin</label>
                            <p className="text-lg">{formatFecha(lote.fecha_real_fin)}</p>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Información Adicional */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center space-x-2">
                          <User className="h-5 w-5 text-indigo-600" />
                          <span>Responsables</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        <div>
                          <label className="text-sm font-medium text-gray-500">Supervisor</label>
                          <p className="text-lg">{lote.supervisor_nombre || 'No asignado'}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Creado por</label>
                          <p className="text-lg">{lote.creado_por_nombre || 'Sistema'}</p>
                        </div>
                        <div>
                          <label className="text-sm font-medium text-gray-500">Fecha de creación</label>
                          <p className="text-lg">{formatFechaCorta(lote.fecha_creacion)}</p>
                        </div>
                      </CardContent>
                    </Card>

                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center space-x-2">
                          <FileText className="h-5 w-5 text-orange-600" />
                          <span>Observaciones</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-gray-700">
                          {lote.observaciones || 'Sin observaciones'}
                        </p>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Sección de Logs de Auditoría */}
                  {showLogs && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center space-x-2">
                          <History className="h-5 w-5 text-purple-600" />
                          <span>Historial de Cambios</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        {isLoadingLogs ? (
                          <p className="text-gray-500">Cargando historial...</p>
                        ) : logs.length === 0 ? (
                          <p className="text-gray-500">No hay registros de auditoría</p>
                        ) : (
                          <div className="space-y-3 max-h-64 overflow-y-auto">
                            {logs.map((log) => (
                              <div key={log.id} className="border-l-4 border-purple-500 pl-3 py-2 bg-purple-50 rounded">
                                <div className="flex items-center justify-between mb-1">
                                  <span className="font-semibold text-purple-900">{log.accion}</span>
                                  <span className="text-xs text-gray-600">
                                    {formatFecha(log.fecha)}
                                  </span>
                                </div>
                                <p className="text-sm text-gray-700">
                                  Por: <span className="font-medium">{log.usuario_nombre_completo || log.usuario}</span>
                                  {log.ip_address && <span className="text-xs text-gray-500 ml-2">({log.ip_address})</span>}
                                </p>
                                {Object.keys(log.cambios).length > 0 && (
                                  <details className="cursor-pointer">
                                    <summary className="text-purple-700 font-medium">Ver cambios</summary>
                                    <pre className="mt-1 p-2 bg-white rounded text-xs overflow-x-auto">
                                      {JSON.stringify(log.cambios, null, 2)}
                                    </pre>
                                  </details>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}
                </div>
              ) : null}
            </div>

            {/* Footer */}
            <div className="flex-shrink-0 bg-gray-50 px-4 py-3 sm:px-6 sm:py-4 flex flex-col sm:flex-row justify-between gap-2 sm:gap-3 border-t">
              <div className="flex flex-col sm:flex-row gap-2 sm:gap-3 flex-1">
                <Button
                  variant="outline"
                  onClick={fetchLogs}
                  disabled={isLoadingLogs}
                  className="w-full sm:w-auto"
                >
                  <History className="h-4 w-4 mr-2" />
                  {showLogs ? 'Ocultar Historial' : 'Ver Historial'}
                </Button>

                {lote?.estado === 'PLANIFICADO' && (
                  <Button
                    variant="outline"
                    onClick={() => setShowCancelDialog(true)}
                    className="w-full sm:w-auto border-red-300 text-red-700 hover:bg-red-50"
                  >
                    <Ban className="h-4 w-4 mr-2" />
                    Cancelar Lote
                  </Button>
                )}

                {/* Botón de Ocultar/Mostrar - Solo para superadmins */}
                {user?.is_superuser && (
                  lote?.visible ? (
                    <Button
                      variant="outline"
                      onClick={() => setShowHideDialog(true)}
                      className="w-full sm:w-auto border-orange-300 text-orange-700 hover:bg-orange-50"
                    >
                      <EyeOff className="h-4 w-4 mr-2" />
                      Ocultar Lote
                    </Button>
                  ) : (
                    <Button
                      variant="outline"
                      onClick={handleMostrar}
                      disabled={isHiding}
                      className="w-full sm:w-auto border-green-300 text-green-700 hover:bg-green-50"
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      {isHiding ? 'Haciendo visible...' : 'Hacer Visible'}
                    </Button>
                  )
                )}
              </div>

              {/* Pestaña de Etapas */}
              {activeTab === 'etapas' && lote && (
                <div className="space-y-6">
                  <LoteEtapasList
                    loteId={lote.id}
                    onRefresh={() => fetchLoteDetail()}
                  />
                </div>
              )}

              {/* Pestaña de Auditoría */}
              {activeTab === 'auditoria' && (
                    <div className="space-y-6">
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center justify-between">
                            <div className="flex items-center space-x-2">
                              <History className="h-5 w-5 text-purple-600" />
                              <span>Historial de Auditoría</span>
                            </div>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                if (showLogs) {
                                  setShowLogs(false)
                                } else {
                                  fetchLogs()
                                }
                              }}
                              disabled={isLoadingLogs}
                              className="w-full sm:w-auto"
                            >
                              <History className="h-4 w-4 mr-2" />
                              {isLoadingLogs ? 'Cargando...' : showLogs ? 'Ocultar Historial' : 'Ver Historial'}
                            </Button>
                          </CardTitle>
                          <p className="text-sm text-gray-600">
                            Registro completo de todas las acciones realizadas en este lote
                          </p>
                        </CardHeader>
                        {showLogs && (
                          <CardContent>
                            {logs.length === 0 ? (
                              <p className="text-gray-500 text-center py-4">
                                No hay registros de auditoría para este lote
                              </p>
                            ) : (
                              <div className="space-y-3 max-h-64 overflow-y-auto">
                                {logs.map((log) => (
                                  <div key={log.id} className="border-l-4 border-purple-500 pl-3 py-2 bg-purple-50 rounded">
                                    <div className="flex items-center justify-between mb-1">
                                      <span className="font-semibold text-purple-900">{log.accion}</span>
                                      <span className="text-xs text-gray-600">
                                        {formatFecha(log.fecha)}
                                      </span>
                                    </div>
                                    <p className="text-sm text-gray-700">
                                      Por: <span className="font-medium">{log.usuario_nombre_completo || log.usuario}</span>
                                    </p>
                                    {log.cambios && (
                                      <details className="mt-2">
                                        <summary className="text-xs text-gray-600 cursor-pointer hover:text-gray-800">
                                          Ver cambios
                                        </summary>
                                        <pre className="text-xs bg-white p-2 rounded mt-1 overflow-x-auto">
                                          {JSON.stringify(log.cambios, null, 2)}
                                        </pre>
                                      </details>
                                    )}
                                  </div>
                                ))}
                              </div>
                            )}
                          </CardContent>
                        )}
                      </Card>
                    </div>
                  )}

                </div>
              )}

              {/* Diálogos de confirmación */}
              {showCancelDialog && (
                  <Card className="border-red-200">
                    <CardHeader className="bg-red-50">
                      <CardTitle className="flex items-center space-x-2 text-red-800">
                        <Ban className="h-5 w-5" />
                        <span>Cancelar Lote</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4 pt-4">
                      <p className="text-sm text-gray-700">
                        Está a punto de cancelar el lote <strong>{lote?.codigo_lote}</strong>.
                        Esta acción quedará registrada en el historial de auditoría.
                      </p>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Motivo de cancelación *
                        </label>
                        <textarea
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                          rows={3}
                          value={cancelMotivo}
                          onChange={(e) => setCancelMotivo(e.target.value)}
                          placeholder="Explique el motivo de la cancelación..."
                        />
                      </div>
                    </CardContent>
                    <div className="flex justify-end space-x-3 p-4 bg-gray-50 rounded-b-lg">
                      <Button
                        variant="outline"
                        onClick={() => {
                          setShowCancelDialog(false)
                          setCancelMotivo('')
                        }}
                      >
                        Cancelar
                      </Button>
                      <Button
                        onClick={handleCancelar}
                        disabled={isCancelling || !cancelMotivo.trim()}
                        className="bg-red-600 hover:bg-red-700"
                      >
                        {isCancelling ? 'Cancelando...' : 'Confirmar Cancelación'}
                      </Button>
                    </div>
                  </Card>
                )}

                {showHideDialog && (
                  <Card className="border-orange-200">
                    <CardHeader className="bg-orange-50">
                      <CardTitle className="flex items-center space-x-2 text-orange-800">
                        <EyeOff className="h-5 w-5" />
                        <span>Ocultar Lote</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4 pt-4">
                      <p className="text-sm text-gray-700">
                        Está a punto de ocultar el lote <strong>{lote?.codigo_lote}</strong> del listado general.
                        El lote seguirá existiendo en la base de datos y podrá ser hecho visible nuevamente.
                        Esta acción quedará registrada en el historial de auditoría.
                      </p>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Motivo de ocultación *
                        </label>
                        <textarea
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                          rows={3}
                          value={hideMotivo}
                          onChange={(e) => setHideMotivo(e.target.value)}
                          placeholder="Explique el motivo de la ocultación..."
                        />
                      </div>
                    </CardContent>
                    <div className="flex justify-end space-x-3 p-4 bg-gray-50 rounded-b-lg">
                      <Button
                        variant="outline"
                        onClick={() => {
                          setShowHideDialog(false)
                          setHideMotivo('')
                        }}
                      >
                        Cancelar
                      </Button>
                      <Button
                        onClick={handleOcultar}
                        disabled={isHiding || !hideMotivo.trim()}
                        className="bg-orange-600 hover:bg-orange-700"
                      >
                        {isHiding ? 'Ocultando...' : 'Confirmar Ocultación'}
                      </Button>
                    </div>
                  </Card>
                )}
              </div>

              <div className="flex flex-col sm:flex-row gap-2 sm:gap-3">
                <Button 
                  variant="outline" 
                  onClick={onClose}
                  className="w-full sm:w-auto"
                >
                  Cerrar
                </Button>
                <Button 
                  className="w-full sm:w-auto bg-blue-600 hover:bg-blue-700"
                  onClick={() => {
                    if (lote && onEdit) {
                      onEdit(lote)
                      onClose()
                    }
                  }}
                >
                  Editar Lote
                </Button>
              </div>
            </div>
          </div>
    </div>
  )
}

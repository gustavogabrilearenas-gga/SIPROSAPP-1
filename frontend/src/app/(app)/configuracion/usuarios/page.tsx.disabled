'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/stores/auth-store'
import { api } from '@/lib/api'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Users, Plus, Key, Trash2, RefreshCw, Search, UserCheck, UserX } from 'lucide-react'
import { UsuarioDetalle, CrearUsuarioRequest } from '@/types/models'
import { format } from 'date-fns'
import { es } from 'date-fns/locale'

// Función auxiliar para formatear fechas de manera segura
const formatFecha = (fecha: string | null | undefined, formato: string = 'dd/MM/yyyy HH:mm') => {
  if (!fecha) return 'Nunca'
  try {
    const date = new Date(fecha)
    // Verificar si la fecha es válida
    if (isNaN(date.getTime())) {
      return 'Nunca'
    }
    return format(date, formato, { locale: es })
  } catch {
    return 'Nunca'
  }
}

function UsuariosContent() {
  const { user } = useAuth()
  const [usuarios, setUsuarios] = useState<UsuarioDetalle[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [selectedUsuario, setSelectedUsuario] = useState<UsuarioDetalle | null>(null)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const [editSaving, setEditSaving] = useState(false)
  const [passwordSaving, setPasswordSaving] = useState(false)
  const [nuevoUsuario, setNuevoUsuario] = useState<CrearUsuarioRequest>({
    username: '',
    email: '',
    first_name: '',
    last_name: '',
    password: '',
    password_confirmacion: '',
    is_staff: false,
    is_superuser: false,
    legajo: '',
    area: '',
    turno_habitual: '',
    telefono: '',
    fecha_ingreso: null,
  })
  const [creating, setCreating] = useState(false)

  const [editUsuario, setEditUsuario] = useState({
    email: '',
    first_name: '',
    last_name: '',
    legajo: '',
    area: '',
    turno_habitual: '',
    telefono: '',
    is_staff: false,
    is_superuser: false,
  })

  const [passwordForm, setPasswordForm] = useState({
    password_nueva: '',
    password_confirmacion: '',
  })

  useEffect(() => {
    fetchUsuarios()
  }, [])

  const fetchUsuarios = async () => {
    try {
      setLoading(true)
      const response = await api.getUsuarios({ search: searchTerm })
      setUsuarios(response.results)
    } catch (error) {
      console.error('Error al cargar usuarios:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleDesactivar = async (usuario: UsuarioDetalle) => {
    if (!confirm(`¿Estás seguro de desactivar al usuario ${usuario.username}?`)) return

    try {
      await api.desactivarUsuario(usuario.id)
      alert('Usuario desactivado exitosamente')
      fetchUsuarios()
    } catch (error: any) {
      alert(error.response?.data?.error || 'Error al desactivar usuario')
    }
  }

  const handleReactivar = async (usuario: UsuarioDetalle) => {
    try {
      await api.reactivarUsuario(usuario.id)
      alert('Usuario reactivado exitosamente')
      fetchUsuarios()
    } catch (error: any) {
      alert(error.response?.data?.error || 'Error al reactivar usuario')
    }
  }

  const handleCreateUsuario = async (e: React.FormEvent) => {
    e.preventDefault()

    if (nuevoUsuario.password !== nuevoUsuario.password_confirmacion) {
      alert('Las contraseñas no coinciden')
      return
    }

    if (nuevoUsuario.password.length < 4) {
      alert('La contraseña debe tener al menos 4 caracteres')
      return
    }

    try {
      setCreating(true)
      await api.createUsuario(nuevoUsuario)
      alert('Usuario creado exitosamente')
      setShowCreateModal(false)
      setNuevoUsuario({
        username: '',
        email: '',
        first_name: '',
        last_name: '',
        password: '',
        password_confirmacion: '',
        is_staff: false,
        is_superuser: false,
        legajo: '',
        area: '',
        turno_habitual: '',
        telefono: '',
        fecha_ingreso: null,
      })
      fetchUsuarios()
    } catch (error: any) {
      alert(error.response?.data?.error || 'Error al crear usuario')
    } finally {
      setCreating(false)
    }
  }

  const openEditModal = (usuario: UsuarioDetalle) => {
    setSelectedUsuario(usuario)
    setEditUsuario({
      email: usuario.email || '',
      first_name: usuario.first_name || '',
      last_name: usuario.last_name || '',
      legajo: usuario.legajo || '',
      area: usuario.area || '',
      turno_habitual: usuario.turno_habitual || '',
      telefono: usuario.telefono || '',
      is_staff: !!usuario.is_staff,
      is_superuser: !!usuario.is_superuser,
    })
    setShowEditModal(true)
  }

  const handleEditUsuario = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedUsuario) return
    try {
      setEditSaving(true)
      console.log('Datos a enviar:', editUsuario)
      await api.updateUsuario(selectedUsuario.id, editUsuario as any)
      alert('Usuario actualizado exitosamente')
      setShowEditModal(false)
      setSelectedUsuario(null)
      fetchUsuarios()
    } catch (error: any) {
      console.error('Error al actualizar:', error)
      alert(error.response?.data?.error || 'Error al actualizar usuario')
    } finally {
      setEditSaving(false)
    }
  }

  const handleChangePassword = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedUsuario) return
    if (passwordForm.password_nueva !== passwordForm.password_confirmacion) {
      alert('Las contraseñas no coinciden')
      return
    }
    try {
      setPasswordSaving(true)
      await api.cambiarPasswordUsuario(selectedUsuario.id, passwordForm)
      alert('Contraseña actualizada')
      setShowPasswordModal(false)
      setSelectedUsuario(null)
      setPasswordForm({ password_nueva: '', password_confirmacion: '' })
    } catch (error: any) {
      alert(error.response?.data?.error || 'Error al actualizar contraseña')
    } finally {
      setPasswordSaving(false)
    }
  }

  const filteredUsuarios = usuarios.filter(u =>
    u.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
    u.full_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    u.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (u.legajo && u.legajo.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  const getRolBadge = (usuario: UsuarioDetalle) => {
    if (usuario.is_superuser) {
      return (
        <span className="px-2 py-1 bg-red-100 text-red-800 text-xs font-semibold rounded">
          SUPERUSER
        </span>
      )
    }
    if (usuario.is_staff) {
      return (
        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded">
          ADMIN
        </span>
      )
    }
    return (
      <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs font-semibold rounded">
        USUARIO
      </span>
    )
  }

  // Solo superusers pueden ver esta página
  if (!user?.is_superuser && !user?.is_staff) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">Acceso Denegado</h1>
          <p className="text-gray-600">No tienes permisos para acceder a esta sección.</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg">
                <Users className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900">Gestión de Usuarios</h1>
                <p className="text-gray-600 mt-1">
                  {filteredUsuarios.length} usuario{filteredUsuarios.length !== 1 ? 's' : ''} encontrado{filteredUsuarios.length !== 1 ? 's' : ''}
                </p>
              </div>
            </div>
            <Button
              onClick={() => setShowCreateModal(true)}
              className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
            >
              <Plus className="h-5 w-5 mr-2" />
              Crear Usuario
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="Buscar por nombre, usuario, email o legajo..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>
          </CardContent>
        </Card>

        {/* User Table */}
        {loading ? (
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
            <p className="mt-4 text-gray-600">Cargando usuarios...</p>
          </div>
        ) : (
          <Card>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Usuario
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Rol
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Área
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Estado
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Último Acceso
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Acciones
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredUsuarios.map((usuario) => (
                      <tr key={usuario.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4">
                          <div>
                            <div className="font-medium text-gray-900">{usuario.full_name}</div>
                            <div className="text-sm text-gray-500">@{usuario.username}</div>
                            {usuario.legajo && (
                              <div className="text-xs text-gray-400">Legajo: {usuario.legajo}</div>
                            )}
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          {getRolBadge(usuario)}
                        </td>
                        <td className="px-6 py-4 text-sm text-gray-600">
                          {usuario.area || '-'}
                        </td>
                        <td className="px-6 py-4">
                          {usuario.is_active ? (
                            <span className="flex items-center text-green-600 text-sm">
                              <UserCheck className="h-4 w-4 mr-1" />
                              Activo
                            </span>
                          ) : (
                            <span className="flex items-center text-red-600 text-sm">
                              <UserX className="h-4 w-4 mr-1" />
                              Inactivo
                            </span>
                          )}
                        </td>
                        <td className="px-6 py-4 text-sm text-gray-600">
                          {formatFecha(usuario.last_login)}
                        </td>
                        <td className="px-6 py-4 text-right">
                          <div className="flex items-center justify-end space-x-2">
                            <button
                              onClick={(e) => {
                                e.preventDefault()
                                e.stopPropagation()
                                console.log('Abriendo modal de edición para:', usuario.username)
                                openEditModal(usuario)
                              }}
                              className="px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                              type="button"
                              title="Editar usuario"
                            >
                              Editar
                            </button>
                            <button
                              onClick={(e) => {
                                e.preventDefault()
                                e.stopPropagation()
                                console.log('Abriendo modal de contraseña para:', usuario.username)
                                setSelectedUsuario(usuario)
                                setShowPasswordModal(true)
                              }}
                              className="px-3 py-1.5 text-sm border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
                              type="button"
                              aria-label={`Cambiar contraseña de ${usuario.username}`}
                              title="Cambiar contraseña"
                            >
                              <Key className="h-4 w-4" />
                            </button>
                            {usuario.is_active ? (
                              <button
                                onClick={(e) => {
                                  e.preventDefault()
                                  e.stopPropagation()
                                  handleDesactivar(usuario)
                                }}
                                disabled={usuario.id === user?.id}
                                className="px-3 py-1.5 text-sm border border-red-300 text-red-600 rounded-md hover:bg-red-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                type="button"
                              >
                                <Trash2 className="h-4 w-4" />
                              </button>
                            ) : (
                              <button
                                onClick={(e) => {
                                  e.preventDefault()
                                  e.stopPropagation()
                                  handleReactivar(usuario)
                                }}
                                className="px-3 py-1.5 text-sm border border-green-300 text-green-600 rounded-md hover:bg-green-50 transition-colors"
                                type="button"
                              >
                                <RefreshCw className="h-4 w-4" />
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {filteredUsuarios.length === 0 && (
                <div className="text-center py-12">
                  <Users className="mx-auto h-12 w-12 text-gray-400" />
                  <p className="mt-2 text-gray-600">No se encontraron usuarios</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>

      {/* Modal de Crear Usuario */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <h2 className="text-2xl font-bold mb-4">Crear Nuevo Usuario</h2>

            <form onSubmit={handleCreateUsuario} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Usuario *
                  </label>
                  <input
                    type="text"
                    value={nuevoUsuario.username}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, username: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email *
                  </label>
                  <input
                    type="email"
                    value={nuevoUsuario.email}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, email: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nombre *
                  </label>
                  <input
                    type="text"
                    value={nuevoUsuario.first_name}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, first_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Apellido *
                  </label>
                  <input
                    type="text"
                    value={nuevoUsuario.last_name}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, last_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contraseña *
                </label>
                <input
                  type="password"
                  value={nuevoUsuario.password}
                  onChange={(e) => setNuevoUsuario({...nuevoUsuario, password: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                  minLength={4}
                />
                <p className="text-xs text-gray-500 mt-1">Mínimo 4 caracteres</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Confirmar Contraseña *
                </label>
                <input
                  type="password"
                  value={nuevoUsuario.password_confirmacion}
                  onChange={(e) => setNuevoUsuario({...nuevoUsuario, password_confirmacion: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Legajo
                  </label>
                  <input
                    type="text"
                    value={nuevoUsuario.legajo || ''}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, legajo: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Área
                  </label>
                  <select
                    value={nuevoUsuario.area || ''}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, area: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seleccionar área...</option>
                    <option value="PRODUCCION">Producción</option>
                    <option value="MANTENIMIENTO">Mantenimiento</option>
                    <option value="ALMACEN">Almacén</option>
                    <option value="CALIDAD">Calidad</option>
                    <option value="ADMINISTRACION">Administración</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Turno Habitual
                  </label>
                  <select
                    value={nuevoUsuario.turno_habitual || ''}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, turno_habitual: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seleccionar turno...</option>
                    <option value="M">Mañana</option>
                    <option value="T">Tarde</option>
                    <option value="N">Noche</option>
                    <option value="R">Rotativo</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Teléfono
                  </label>
                  <input
                    type="tel"
                    value={nuevoUsuario.telefono || ''}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, telefono: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Tipo de Usuario
                  </label>
                  <div className="space-y-2">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={nuevoUsuario.is_staff}
                        onChange={(e) => setNuevoUsuario({...nuevoUsuario, is_staff: e.target.checked})}
                        className="mr-2"
                      />
                      Administrador (puede gestionar usuarios)
                    </label>
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        checked={nuevoUsuario.is_superuser}
                        onChange={(e) => setNuevoUsuario({...nuevoUsuario, is_superuser: e.target.checked})}
                        className="mr-2"
                      />
                      Superusuario (control total del sistema)
                    </label>
                  </div>
                </div>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowCreateModal(false)}
                  disabled={creating}
                >
                  Cancelar
                </Button>
                <Button
                  type="submit"
                  disabled={creating}
                  className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                >
                  {creating ? 'Creando...' : 'Crear Usuario'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal de Editar Usuario */}
      {showEditModal && selectedUsuario && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <h2 className="text-2xl font-bold mb-4">Editar Usuario</h2>
            <form onSubmit={handleEditUsuario} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Nombre *</label>
                  <input
                    type="text"
                    value={editUsuario.first_name}
                    onChange={(e) => setEditUsuario({...editUsuario, first_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Apellido *</label>
                  <input
                    type="text"
                    value={editUsuario.last_name}
                    onChange={(e) => setEditUsuario({...editUsuario, last_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                  <input
                    type="email"
                    value={editUsuario.email}
                    onChange={(e) => setEditUsuario({...editUsuario, email: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Teléfono</label>
                  <input
                    type="tel"
                    value={editUsuario.telefono}
                    onChange={(e) => setEditUsuario({...editUsuario, telefono: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Legajo</label>
                  <input
                    type="text"
                    value={editUsuario.legajo}
                    onChange={(e) => setEditUsuario({...editUsuario, legajo: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Área</label>
                  <select
                    value={editUsuario.area}
                    onChange={(e) => setEditUsuario({...editUsuario, area: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seleccionar área...</option>
                    <option value="PRODUCCION">Producción</option>
                    <option value="MANTENIMIENTO">Mantenimiento</option>
                    <option value="ALMACEN">Almacén</option>
                    <option value="CALIDAD">Calidad</option>
                    <option value="ADMINISTRACION">Administración</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Turno Habitual</label>
                  <select
                    value={editUsuario.turno_habitual}
                    onChange={(e) => setEditUsuario({...editUsuario, turno_habitual: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Seleccionar turno...</option>
                    <option value="M">Mañana</option>
                    <option value="T">Tarde</option>
                    <option value="N">Noche</option>
                    <option value="R">Rotativo</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editUsuario.is_staff}
                      onChange={(e) => setEditUsuario({...editUsuario, is_staff: e.target.checked})}
                      className="mr-2"
                    />
                    Administrador (puede gestionar usuarios)
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editUsuario.is_superuser}
                      onChange={(e) => setEditUsuario({...editUsuario, is_superuser: e.target.checked})}
                      className="mr-2"
                    />
                    Superusuario (control total)
                  </label>
                </div>
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <Button type="button" variant="outline" onClick={() => setShowEditModal(false)} disabled={editSaving}>
                  Cancelar
                </Button>
                <Button type="submit" disabled={editSaving} className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700">
                  {editSaving ? 'Guardando...' : 'Guardar Cambios'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal de Cambio de Contraseña */}
      {showPasswordModal && selectedUsuario && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full">
            <h2 className="text-2xl font-bold mb-4">Cambiar Contraseña</h2>
            <form onSubmit={handleChangePassword} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Nueva contraseña *</label>
                <input
                  type="password"
                  value={passwordForm.password_nueva}
                  onChange={(e) => setPasswordForm({...passwordForm, password_nueva: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                  minLength={4}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Confirmar contraseña *</label>
                <input
                  type="password"
                  value={passwordForm.password_confirmacion}
                  onChange={(e) => setPasswordForm({...passwordForm, password_confirmacion: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              <div className="flex justify-end space-x-3 pt-2">
                <Button type="button" variant="outline" onClick={() => setShowPasswordModal(false)} disabled={passwordSaving}>
                  Cancelar
                </Button>
                <Button type="submit" disabled={passwordSaving} className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700">
                  {passwordSaving ? 'Guardando...' : 'Actualizar Contraseña'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

export default function UsuariosPage() {
  return (
    <ProtectedRoute>
      <UsuariosContent />
    </ProtectedRoute>
  )
}

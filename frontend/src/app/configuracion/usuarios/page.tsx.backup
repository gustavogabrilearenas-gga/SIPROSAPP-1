'use client'

import { useState, useEffect } from 'react'
import { useAuth } from '@/stores/auth-store'
import { api } from '@/lib/api'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Users, Plus, Key, Trash2, RefreshCw, Search, UserCheck, UserX, Edit, Eye, EyeOff } from 'lucide-react'
import { UsuarioDetalle, CrearUsuarioRequest } from '@/types/models'
import { format } from 'date-fns'
import { es } from 'date-fns/locale'

// Funci√≥n auxiliar para formatear fechas de manera segura
const formatFecha = (fecha: string | null | undefined, formato: string = 'dd/MM/yyyy HH:mm') => {
  if (!fecha) return 'Nunca'
  try {
    const date = new Date(fecha)
    if (isNaN(date.getTime())) {
      return 'Nunca'
    }
    return format(date, formato, { locale: es })
  } catch {
    return 'Nunca'
  }
}

function UsuariosContent() {
  const { user } = useAuth()
  const [usuarios, setUsuarios] = useState<UsuarioDetalle[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [selectedUsuario, setSelectedUsuario] = useState<UsuarioDetalle | null>(null)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const [editSaving, setEditSaving] = useState(false)
  const [passwordSaving, setPasswordSaving] = useState(false)
  const [creating, setCreating] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)

  // Estado para nuevo usuario
  const [nuevoUsuario, setNuevoUsuario] = useState<CrearUsuarioRequest>({
    username: '',
    email: '',
    first_name: '',
    last_name: '',
    password: '',
    password_confirmacion: '',
    is_staff: false,
    is_superuser: false,
    legajo: '',
    area: '',
    turno_habitual: '',
    telefono: '',
    fecha_ingreso: '',
    activo: true
  })

  // Estado para editar usuario
  const [editUsuario, setEditUsuario] = useState({
    id: 0,
    username: '',
    email: '',
    first_name: '',
    last_name: '',
    is_staff: false,
    is_superuser: false,
    legajo: '',
    area: '',
    turno_habitual: '',
    telefono: '',
    fecha_ingreso: '',
    activo: true
  })

  // Estado para cambio de contrase√±a
  const [passwordForm, setPasswordForm] = useState({
    password: '',
    password_confirmacion: ''
  })

  // Debug de autenticaci√≥n
  console.log('üîç Estado de autenticaci√≥n:', {
    user,
    isAuthenticated: user ? true : false,
    isSuperuser: user?.is_superuser,
    isStaff: user?.is_staff,
    hasToken: !!api.getAccessToken()
  })

  // Si no hay usuario, intentar cargar el usuario actual
  if (!user) {
    return (
      <div className="p-6">
        <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded">
          <p>Cargando informaci√≥n del usuario...</p>
          <div className="mt-4">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 inline-block"></div>
            <span className="ml-2">Verificando autenticaci√≥n...</span>
          </div>
        </div>
      </div>
    )
  }

  // Solo superusers pueden ver esta p√°gina
  if (!user?.is_superuser && !user?.is_staff) {
    return (
      <div className="p-6">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <p>No tienes permisos para acceder a esta p√°gina.</p>
          <p className="text-sm mt-2">
            Usuario: {user?.username || 'No autenticado'} | 
            Superuser: {user?.is_superuser ? 'S√≠' : 'No'} | 
            Staff: {user?.is_staff ? 'S√≠' : 'No'}
          </p>
        </div>
      </div>
    )
  }

  // Cargar usuarios
  const fetchUsuarios = async () => {
    try {
      setLoading(true)
      console.log('üîç Intentando cargar usuarios...')
      console.log('üîë Usuario autenticado:', user)
      console.log('üîë Token disponible:', !!api.getAccessToken())
      
      const response = await api.getUsuarios()
      console.log('‚úÖ Usuarios cargados:', response)
      setUsuarios(response.results || response)
    } catch (error: any) {
      console.error('‚ùå Error al cargar usuarios:', error)
      console.error('‚ùå Error response:', error.response?.data)
      console.error('‚ùå Error status:', error.response?.status)
      
      // Mostrar error al usuario
      alert(`Error al cargar usuarios: ${error.response?.data?.detail || error.message}`)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    console.log('üîÑ useEffect ejecut√°ndose...')
    console.log('üë§ Usuario actual:', user)
    console.log('üîë Token disponible:', !!api.getAccessToken())
    
    // Siempre intentar cargar usuarios si hay token
    if (api.getAccessToken()) {
      console.log('‚úÖ Hay token, cargando usuarios...')
      fetchUsuarios()
    } else {
      console.log('‚ùå No hay token, redirigiendo a login...')
      window.location.href = '/login'
    }
  }, [])

  // Crear usuario
  const handleCreateUsuario = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (nuevoUsuario.password !== nuevoUsuario.password_confirmacion) {
      alert('Las contrase√±as no coinciden')
      return
    }

    try {
      setCreating(true)
      await api.post('/usuarios/', nuevoUsuario)
      setShowCreateModal(false)
      setNuevoUsuario({
        username: '',
        email: '',
        first_name: '',
        last_name: '',
        password: '',
        password_confirmacion: '',
        is_staff: false,
        is_superuser: false,
        legajo: '',
        area: '',
        turno_habitual: '',
        telefono: '',
        fecha_ingreso: '',
        activo: true
      })
      fetchUsuarios()
    } catch (error) {
      console.error('Error al crear usuario:', error)
      alert('Error al crear usuario')
    } finally {
      setCreating(false)
    }
  }

  // Editar usuario
  const handleEditUsuario = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      setEditSaving(true)
      await api.put(`/usuarios/${editUsuario.id}/`, editUsuario)
      setShowEditModal(false)
      fetchUsuarios()
    } catch (error) {
      console.error('Error al editar usuario:', error)
      alert('Error al editar usuario')
    } finally {
      setEditSaving(false)
    }
  }

  // Cambiar contrase√±a
  const handleChangePassword = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (passwordForm.password !== passwordForm.password_confirmacion) {
      alert('Las contrase√±as no coinciden')
      return
    }

    try {
      setPasswordSaving(true)
      await api.post(`/usuarios/${selectedUsuario?.id}/cambiar-password/`, {
        password: passwordForm.password
      })
      setShowPasswordModal(false)
      setPasswordForm({ password: '', password_confirmacion: '' })
      alert('Contrase√±a actualizada correctamente')
    } catch (error) {
      console.error('Error al cambiar contrase√±a:', error)
      alert('Error al cambiar contrase√±a')
    } finally {
      setPasswordSaving(false)
    }
  }

  // Eliminar usuario
  const handleDeleteUsuario = async (id: number) => {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar este usuario?')) {
      return
    }

    try {
      await api.delete(`/usuarios/${id}/`)
      fetchUsuarios()
    } catch (error) {
      console.error('Error al eliminar usuario:', error)
      alert('Error al eliminar usuario')
    }
  }

  // Filtrar usuarios
  const filteredUsuarios = usuarios.filter(usuario =>
    usuario.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
    usuario.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    usuario.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    usuario.last_name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  if (loading) {
    return (
      <div className="p-6">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Gesti√≥n de Usuarios</h1>
          <p className="text-gray-600 mt-2">Administra los usuarios del sistema</p>
        </div>
        <div className="flex space-x-3">
          <Button
            onClick={fetchUsuarios}
            variant="outline"
            disabled={loading}
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            Recargar
          </Button>
          <Button
            onClick={() => setShowCreateModal(true)}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <Plus className="w-4 h-4 mr-2" />
            Nuevo Usuario
          </Button>
        </div>
      </div>

      {/* B√∫squeda */}
      <div className="mb-6">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            type="text"
            placeholder="Buscar usuarios..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>

      {/* Lista de usuarios */}
      <div className="grid gap-4">
        {loading && (
          <div className="flex items-center justify-center p-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <span className="ml-3 text-gray-600">Cargando usuarios...</span>
          </div>
        )}
        
        {!loading && filteredUsuarios.length === 0 && (
          <div className="text-center p-8">
            <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No se encontraron usuarios</h3>
            <p className="text-gray-600">No hay usuarios que coincidan con tu b√∫squeda.</p>
          </div>
        )}
        
        {!loading && filteredUsuarios.map((usuario) => (
          <Card key={usuario.id} className="hover:shadow-md transition-shadow">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                    <Users className="w-6 h-6 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">
                      {usuario.first_name} {usuario.last_name}
                    </h3>
                    <p className="text-gray-600">@{usuario.username}</p>
                    <p className="text-sm text-gray-500">{usuario.email}</p>
                    <div className="flex items-center space-x-2 mt-1">
                      {usuario.is_superuser && (
                        <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded">
                          SUPERUSER
                        </span>
                      )}
                      {usuario.is_staff && !usuario.is_superuser && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                          STAFF
                        </span>
                      )}
                      {usuario.profile?.area && (
                        <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded">
                          {usuario.profile.area}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setEditUsuario({
                        id: usuario.id,
                        username: usuario.username,
                        email: usuario.email,
                        first_name: usuario.first_name,
                        last_name: usuario.last_name,
                        is_staff: usuario.is_staff,
                        is_superuser: usuario.is_superuser,
                        legajo: usuario.profile?.legajo || '',
                        area: usuario.profile?.area || '',
                        turno_habitual: usuario.profile?.turno_habitual || '',
                        telefono: usuario.profile?.telefono || '',
                        fecha_ingreso: usuario.profile?.fecha_ingreso || '',
                        activo: usuario.is_active
                      })
                      setShowEditModal(true)
                    }}
                  >
                    <Edit className="w-4 h-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setSelectedUsuario(usuario)
                      setShowPasswordModal(true)
                    }}
                  >
                    <Key className="w-4 h-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDeleteUsuario(usuario.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              <div className="mt-4 text-sm text-gray-500">
                <p>√öltimo acceso: {formatFecha(usuario.last_login)}</p>
                <p>Registrado: {formatFecha(usuario.date_joined)}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Modal Crear Usuario */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <h2 className="text-2xl font-bold mb-4">Crear Nuevo Usuario</h2>
              <form onSubmit={handleCreateUsuario} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Usuario *
                    </label>
                    <input
                      type="text"
                      required
                      value={nuevoUsuario.username}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, username: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Email *
                    </label>
                    <input
                      type="email"
                      required
                      value={nuevoUsuario.email}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, email: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Nombre *
                    </label>
                    <input
                      type="text"
                      required
                      value={nuevoUsuario.first_name}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, first_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Apellido *
                    </label>
                    <input
                      type="text"
                      required
                      value={nuevoUsuario.last_name}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, last_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Contrase√±a *
                    </label>
                    <div className="relative">
                      <input
                        type={showPassword ? "text" : "password"}
                        required
                        value={nuevoUsuario.password}
                        onChange={(e) => setNuevoUsuario({...nuevoUsuario, password: e.target.value})}
                        className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2"
                      >
                        {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Confirmar Contrase√±a *
                    </label>
                    <div className="relative">
                      <input
                        type={showConfirmPassword ? "text" : "password"}
                        required
                        value={nuevoUsuario.password_confirmacion}
                        onChange={(e) => setNuevoUsuario({...nuevoUsuario, password_confirmacion: e.target.value})}
                        className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute right-3 top-1/2 transform -translate-y-1/2"
                      >
                        {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Legajo
                    </label>
                    <input
                      type="text"
                      value={nuevoUsuario.legajo}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, legajo: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      √Årea
                    </label>
                    <select
                      value={nuevoUsuario.area}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, area: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Seleccionar √°rea</option>
                      <option value="PRODUCCION">Producci√≥n</option>
                      <option value="ADMINISTRACION">Administraci√≥n</option>
                      <option value="CALIDAD">Calidad</option>
                      <option value="MANTENIMIENTO">Mantenimiento</option>
                    </select>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Turno Habitual
                    </label>
                    <select
                      value={nuevoUsuario.turno_habitual}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, turno_habitual: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Seleccionar turno</option>
                      <option value="MA√ëANA">Ma√±ana</option>
                      <option value="TARDE">Tarde</option>
                      <option value="NOCHE">Noche</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Tel√©fono
                    </label>
                    <input
                      type="tel"
                      value={nuevoUsuario.telefono}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, telefono: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Fecha de Ingreso
                  </label>
                  <input
                    type="date"
                    value={nuevoUsuario.fecha_ingreso}
                    onChange={(e) => setNuevoUsuario({...nuevoUsuario, fecha_ingreso: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div className="flex items-center space-x-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={nuevoUsuario.is_staff}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, is_staff: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Es Staff</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={nuevoUsuario.is_superuser}
                      onChange={(e) => setNuevoUsuario({...nuevoUsuario, is_superuser: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Es Superuser</span>
                  </label>
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowCreateModal(false)}
                  >
                    Cancelar
                  </Button>
                  <Button
                    type="submit"
                    disabled={creating}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {creating ? 'Creando...' : 'Crear Usuario'}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Modal Editar Usuario */}
      {showEditModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <h2 className="text-2xl font-bold mb-4">Editar Usuario</h2>
              <form onSubmit={handleEditUsuario} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Usuario
                    </label>
                    <input
                      type="text"
                      value={editUsuario.username}
                      onChange={(e) => setEditUsuario({...editUsuario, username: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Email
                    </label>
                    <input
                      type="email"
                      value={editUsuario.email}
                      onChange={(e) => setEditUsuario({...editUsuario, email: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Nombre
                    </label>
                    <input
                      type="text"
                      value={editUsuario.first_name}
                      onChange={(e) => setEditUsuario({...editUsuario, first_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Apellido
                    </label>
                    <input
                      type="text"
                      value={editUsuario.last_name}
                      onChange={(e) => setEditUsuario({...editUsuario, last_name: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Legajo
                    </label>
                    <input
                      type="text"
                      value={editUsuario.legajo}
                      onChange={(e) => setEditUsuario({...editUsuario, legajo: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      √Årea
                    </label>
                    <select
                      value={editUsuario.area}
                      onChange={(e) => setEditUsuario({...editUsuario, area: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Seleccionar √°rea</option>
                      <option value="PRODUCCION">Producci√≥n</option>
                      <option value="ADMINISTRACION">Administraci√≥n</option>
                      <option value="CALIDAD">Calidad</option>
                      <option value="MANTENIMIENTO">Mantenimiento</option>
                    </select>
                  </div>
                </div>

                <div className="flex items-center space-x-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editUsuario.is_staff}
                      onChange={(e) => setEditUsuario({...editUsuario, is_staff: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Es Staff</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editUsuario.is_superuser}
                      onChange={(e) => setEditUsuario({...editUsuario, is_superuser: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Es Superuser</span>
                  </label>
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowEditModal(false)}
                  >
                    Cancelar
                  </Button>
                  <Button
                    type="submit"
                    disabled={editSaving}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {editSaving ? 'Guardando...' : 'Guardar Cambios'}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Modal Cambiar Contrase√±a */}
      {showPasswordModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-md w-full">
            <div className="p-6">
              <h2 className="text-2xl font-bold mb-4">Cambiar Contrase√±a</h2>
              <p className="text-gray-600 mb-4">
                Cambiar contrase√±a para: <strong>{selectedUsuario?.username}</strong>
              </p>
              <form onSubmit={handleChangePassword} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nueva Contrase√±a
                  </label>
                  <div className="relative">
                    <input
                      type={showPassword ? "text" : "password"}
                      required
                      value={passwordForm.password}
                      onChange={(e) => setPasswordForm({...passwordForm, password: e.target.value})}
                      className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2"
                    >
                      {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                    </button>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Confirmar Contrase√±a
                  </label>
                  <div className="relative">
                    <input
                      type={showConfirmPassword ? "text" : "password"}
                      required
                      value={passwordForm.password_confirmacion}
                      onChange={(e) => setPasswordForm({...passwordForm, password_confirmacion: e.target.value})}
                      className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      type="button"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2"
                    >
                      {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                    </button>
                  </div>
                </div>
                <div className="flex justify-end space-x-3 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowPasswordModal(false)}
                  >
                    Cancelar
                  </Button>
                  <Button
                    type="submit"
                    disabled={passwordSaving}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {passwordSaving ? 'Guardando...' : 'Actualizar Contrase√±a'}
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default function UsuariosPage() {
  return (
    <div>
      <UsuariosContent />
    </div>
  )
}
Fase F3.3 – QA técnico y enriquecimiento de datos (Ubicaciones, Turnos y Paradas)
===============================================================================

1. Alcance y metodología
------------------------
- Revisión visual/funcional de los CRUDs recién conectados (Ubicaciones, Turnos y Paradas) usando los listados y formularios modales existentes.
- Ejecución de validaciones técnicas sobre los endpoints involucrados (filtros, paginación, campos calculados) contrastando expectativas del frontend.
- Ajustes correctivos y de enriquecimiento de datos priorizados cuando se detectaron brechas.

2. Hallazgos principales
------------------------
- Ubicaciones
  * La grilla esperaba totales de máquinas y lotes de insumo por ubicación, pero el serializer solo devolvía campos básicos → tarjetas sin datos clave.
- Turnos
  * El listado mostraba un contador de lotes asociados por turno, inexistente en la respuesta actual → inconsistencias visuales.
- Paradas
  * El endpoint no exponía información de lote/etapa ni nombres de operadores; la vista recurría a identificadores crudos.
  * Duración en curso no se recalculaba en el backend, dejando tarjetas con textos vacíos o poco claros.
  * Faltaba filtrado por `lote`/`lote_etapa`, requerido por el modal de detalle de lotes.
- Lotes y Etapas
  * La API usaba la paginación por defecto de DRF sin permitir `page_size`, rompiendo la carga masiva de etapas solicitada desde el modal de paradas.

3. Mejoras aplicadas
--------------------
- Ubicaciones: anotaciones `maquinas_count` y `lotes_insumo_count` en el queryset + campos de solo lectura en el serializer.
- Turnos: conteo de lotes visibles por turno mediante `Count` con filtro y exposición del dato en la API.
- Paradas:
  * Serializer enriquecido con referencias de lote y etapa, nombres de usuario y formatos de duración (incluyendo cálculo en curso).
  * Búsqueda extendida por etapa y actualización del listado para mostrar los nuevos campos en tarjetas y filtros.
  * Filtros adicionales (`lote`, `lote_etapa`) en el ViewSet y `select_related` profundizado para evitar N+1 queries.
- Paginación: creación de `DefaultPageNumberPagination` habilitando `page_size` (máx. 200) y actualización de la configuración global DRF.

4. Verificaciones posteriores
-----------------------------
- Frontend: revisión manual de los tres listados (creación/edición/filtros) confirmando que los datos enriquecidos y contadores se muestran correctamente.
- Backend: `python manage.py check` para asegurar integridad de configuraciones tras los cambios.

5. Observaciones adicionales
----------------------------
- Se recomienda incorporar pruebas automáticas para validar los conteos agregados en Ubicaciones/Turnos y los filtros de Paradas en regresiones futuras.
- Los formularios modales se mantienen sin cambios funcionales, pero podrían beneficiarse de selects con búsqueda cuando el volumen de etapas crezca.

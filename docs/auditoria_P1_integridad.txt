Auditoría técnica P1 – Integridad de imports, exports, hooks y rutas
===================================================================

1. frontend/src/app/turnos/page.tsx
   - Problema detectado: La función `getTurnoIcon` devolvía un elemento JSX y el resultado se usaba como si fuera un componente (`<TurnoIcon />`), generando el error "Element type is invalid". Además, el ícono `Package` se usaba sin importar, lo que producía `undefined` en tiempo de ejecución.
   - Corrección aplicada: Se normalizó `getTurnoIcon` para que devuelva el componente Lucide (`LucideIcon`) correspondiente y se añadió la importación explícita de `Package`. De este modo `TurnoIcon` apunta a un componente válido y deja de producir errores en tiempo de ejecución.

2. frontend/src/app/ubicaciones/page.tsx
   - Problema detectado: El helper `getTipoIcon` repetía el patrón incorrecto: retornaba un elemento JSX y luego se intentaba renderizar como componente (`<TipoIcon />`), ocasionando el mismo error de tipo inválido.
   - Corrección aplicada: Se ajustó `getTipoIcon` para que devuelva la referencia `LucideIcon` adecuada. Ahora `TipoIcon` representa un componente válido al renderizarse.

3. frontend/src/hooks/use-toast.ts
   - Problema detectado: Las definiciones de tipos heredaban las propiedades `title`, `description` y `action` de `ToastProps` (tipadas como cadenas), provocando inconsistencias al usar `ReactNode` en los helpers `toast.success`/`toast.error`.
   - Corrección aplicada: Se redefinieron los tipos mediante `Omit` para asegurar que `title`, `description` y `action` acepten `ReactNode`, manteniendo la compatibilidad de los hooks y evitando retornos inválidos.

No se detectaron discrepancias en rutas de importación ni faltantes de exportaciones adicionales dentro del alcance revisado.

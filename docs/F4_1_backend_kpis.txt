Fase F4.1 – Backend KPIs y métricas
===================================

Descripción general
-------------------
Se agregaron endpoints dedicados a alimentar el dashboard y los KPIs globales de la
plataforma. Cada ruta expone datos agregados provenientes de los módulos de
producción, inventario, mantenimiento y calidad, reemplazando los mocks del
frontend.

Endpoints disponibles
---------------------

1. GET /api/kpis/resumen_dashboard/
   - Retorna los KPIs ejecutivos principales.
   - Datos incluidos:
     * produccion_diaria: lotes finalizados en la fecha actual.
     * produccion_semanal: lotes finalizados desde el lunes de la semana en curso.
     * rendimiento_promedio: promedio (producción real / planificada) de los lotes
       finalizados en la semana.
     * inventario_stock_bajo: lotes de insumos con stock menor o igual al punto de
       reorden.
     * inventario_por_vencer: lotes de insumos que vencen en los próximos 30 días.
     * mantenimiento_abiertas: órdenes de trabajo en estado ABIERTA o ASIGNADA.
     * mantenimiento_en_pausa: órdenes de trabajo en estado EN_PROCESO o PAUSADA.
     * mantenimiento_completadas_semana: órdenes completadas desde el lunes.
     * calidad_desviaciones_abiertas: desviaciones en estado distinto de CERRADA.
     * calidad_controles_no_conformes: controles de calidad con conforme=False.

   Ejemplo de respuesta:
   {
     "status": 200,
     "data": {
       "produccion_diaria": 6,
       "produccion_semanal": 24,
       "rendimiento_promedio": 0.92,
       "inventario_stock_bajo": 3,
       "inventario_por_vencer": 5,
       "mantenimiento_abiertas": 4,
       "mantenimiento_en_pausa": 2,
       "mantenimiento_completadas_semana": 7,
       "calidad_desviaciones_abiertas": 1,
       "calidad_controles_no_conformes": 2
     },
     "message": "ok"
   }

2. GET /api/kpis/oee/
   - Devuelve las métricas OEE (disponibilidad, rendimiento y calidad) tomando los
     últimos 30 días como ventana.
   - Fórmulas empleadas:
     * disponibilidad = runtime_total / (runtime_total + downtime_total)
       - runtime_total: suma de `duracion_minutos` de LoteEtapa finalizados.
       - downtime_total: suma de `duracion_minutos` de Parada registradas.
     * rendimiento = sum(cantidad_salida) / sum(cantidad_entrada) en etapas con
       datos completos.
     * calidad = (sum(cantidad_producida) - sum(cantidad_rechazada)) /
       sum(cantidad_producida) en lotes finalizados.
     * oee = disponibilidad * rendimiento * calidad.

   Ejemplo de respuesta:
   {
     "status": 200,
     "data": {
       "oee": 0.88,
       "disponibilidad": 0.92,
       "rendimiento": 0.90,
       "calidad": 0.95
     },
     "message": "ok"
   }

3. GET /api/kpis/historial_produccion/
   - Ofrece una serie temporal de los últimos 7 días con:
     * lotes_finalizados
     * unidades_producidas
     * unidades_rechazadas
   - Los días sin producción se devuelven con valores en cero para mantener la
     continuidad del gráfico.

   Ejemplo de respuesta:
   {
     "status": 200,
     "data": {
       "historial": [
         {"fecha": "2024-03-18", "lotes_finalizados": 2, "unidades_producidas": 1800, "unidades_rechazadas": 12},
         {"fecha": "2024-03-19", "lotes_finalizados": 0, "unidades_producidas": 0, "unidades_rechazadas": 0},
         ...
       ]
     },
     "message": "ok"
   }

4. GET /api/kpis/alertas/
   - Consolida alertas operativas:
     * insumos_por_vencer: lotes de insumo que vencen en <=30 días.
     * insumos_stock_critico: lotes de insumo bajo stock mínimo.
     * maquinas_fuera_servicio: órdenes activas que requieren parada de producción.
     * ordenes_atrasadas: órdenes activas con fecha_planificada en el pasado.
     * desviaciones_criticas_abiertas: desviaciones CRITICA abiertas o en proceso.

   Ejemplo de respuesta:
   {
     "status": 200,
     "data": {
       "insumos_por_vencer": 4,
       "insumos_stock_critico": 2,
       "maquinas_fuera_servicio": 1,
       "ordenes_atrasadas": 3,
       "desviaciones_criticas_abiertas": 1
     },
     "message": "ok"
   }

Próximas extensiones planificadas
---------------------------------
- F4.2: incorporar filtros dinámicos (planta, línea, turno) en los endpoints.
- F4.3: agregar cálculos predictivos basados en tendencias históricas y tiempos de
  ciclo, junto con cacheo de resultados para dashboards en tiempo real.
